#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jan 10 20:02:13 2020

@author: hamza
"""

# Upper Confidence Bound

# Step 1: Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Step 2: Importing the dataset
dataset = pd.read_csv('Ads_CTR_Optimisation.csv')

# Step 3: Implementing UCB
import math
N = 10000 # round(users)
d = 10 # arm(ads)
ads_selected = []  # Max.UCB 
# Step 1: At each round n, we consider two numbers for each ad i:
numbers_of_selections = [0] * d  # zeros of size d.
sums_of_rewards = [0] * d           # sums of reward of each (ad)round
total_reward = 0
# step 2: 
for n in range(0, N):
    max_upper_bound = 0
    ad = 0
    for i in range(0, d): 
        if numbers_of_selections[i] > 0:
            avg_reward = sums_of_rewards[i] / numbers_of_selections[i]
            delta_i = math.sqrt(3/2 * math.log(n+1) / numbers_of_selections[i])
            upper_bound = avg_reward + delta_i
        else:
            upper_bound = 1e400
        # Step 3:
        if upper_bound > max_upper_bound:
            max_upper_bound = upper_bound
            ad = i 
            
    ads_selected.append(ad)
    numbers_of_selections[ad] = numbers_of_selections[ad] + 1
    reward = dataset.values[n, ad]
    sums_of_rewards[ad] += reward
    total_reward += reward   
            
            
# Step 3: Visualising the results
plt.hist(ads_selected, rwidth=0.5)
plt.title('Histogram of ads selections')
plt.xlabel('Ads')
plt.ylabel('Number of times each ad was selected')
plt.show()
            
            
            
            
            
            
            
            